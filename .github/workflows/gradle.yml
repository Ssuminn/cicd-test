# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set yml files
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/main/resources/application.yml
        env:
          spring.datasource.url: ${{ secrets.RDS_HOST }}
          spring.datasource.username: ${{ secrets.RDS_USERNAME }}
          spring.datasource.password: ${{ secrets.RDS_PASSWORD }}
          jwt.key: ${{ secrets.JWT_KEY }}



      # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      # - name: Setup Gradle
      #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      # - name: Build with Gradle Wrapper
      #   env:
      #     spring.datasource.url: ${{ secrets.RDS_HOST }}
      #     spring.datasource.username: ${{ secrets.RDS_USERNAME }}
      #     spring.datasource.password: ${{ secrets.RDS_PASSWORD }}
      #     jwt.key: ${{ secrets.JWT_KEY }}

      #   run: chmod +x ./gradlew && ./gradlew build

      # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
      # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
      #

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        env:
          spring.datasource.url: ${{ secrets.RDS_HOST }}
          spring.datasource.username: ${{ secrets.RDS_USERNAME }}
          spring.datasource.password: ${{ secrets.RDS_PASSWORD }}
          jwt.key: ${{ secrets.JWT_KEY }}
        run: ./gradlew clean build -x test


        # - name: Setup Gradle
        #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
        #   with:
        #     gradle-version: '8.5'

        # - name: Build with Gradle 8.5
        #   run: chmod +x gradle && gradle build
        # 3. Docker 이미지 빌드
      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/test
      - name: radis image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/radis -f Dockerfile-radis .

      # 4. DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 5. Docker Hub 이미지 푸시
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/test
      - name: radis Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/radis

#  # 위 과정에서 푸시한 이미지를 ec2에서 풀받아서 실행시키는 과정
#  run-docker-image-on-ec2:
#    # build-docker-image (위)과정이 완료되어야 실행됩니다.
#    needs: build
#    runs-on: self-hosted
#
#    steps:
#      # 1. 최신 이미지를 풀받습니다
#      - name: docker pull
#        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/final-project
#
#      # 2. 기존의 컨테이너를 중지시킵니다
#      - name: docker stop container
#        run: sudo docker stop $(sudo docker ps -q) 2>/dev/null || true
#
#      # 3. 최신 이미지를 컨테이너화하여 실행시킵니다
#      - name: docker run new container
#        run: sudo docker run --name github-actions-demo --rm -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/final-project
#
#      # 4. 미사용 이미지를 정리합니다
#      - name: delete old docker image
#        run: sudo docker system prune -f